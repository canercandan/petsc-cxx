# - Try to find SLEPc
# Once done this will define
#
#  SLEPC_FOUND        - system has SLEPc
#  SLEPC_INCLUDES     - the SLEPc include directories
#  SLEPC_LIBRARIES    - Link these to use SLEPc
#  SLEPC_COMPILER     - Compiler used by SLEPc, helpful to find a compatible MPI
#  SLEPC_DEFINITIONS  - Compiler switches for using SLEPc
#  SLEPC_MPIEXEC      - Executable for running MPI programs
#  SLEPC_VERSION      - Version string (MAJOR.MINOR.SUBMINOR)
#
#  Hack: SLEPC_VERSION currently decides on the version based on the
#  layout.  Otherwise we need to run C code to determine the version.
#
# Setting these changes the behavior of the search
#  SLEPC_DIR - directory in which SLEPc resides
#  SLEPC_ARCH - build architecture
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#

function (slepc_get_version)
  if (EXISTS "${SLEPC_DIR}/include/slepcversion.h")
    file (STRINGS "${SLEPC_DIR}/include/slepcversion.h" vstrings REGEX "#define SLEPC_VERSION_(RELEASE|MAJOR|MINOR|SUBMINOR|PATCH) ")
    foreach (line ${vstrings})
      string (REGEX REPLACE " +" ";" fields ${line}) # break line into three fields (the first is always "#define")
      list (GET fields 1 var)
      list (GET fields 2 val)
      set (${var} ${val} PARENT_SCOPE)
      set (${var} ${val})         # Also in local scope so we have access below
    endforeach ()
    if (SLEPC_VERSION_RELEASE)
      set (SLEPC_VERSION "${SLEPC_VERSION_MAJOR}.${SLEPC_VERSION_MINOR}.${SLEPC_VERSION_SUBMINOR}p${SLEPC_VERSION_PATCH}" PARENT_SCOPE)
    else ()
      # make dev version compare higher than any patch level of a released version
      set (SLEPC_VERSION "${SLEPC_VERSION_MAJOR}.${SLEPC_VERSION_MINOR}.${SLEPC_VERSION_SUBMINOR}.99" PARENT_SCOPE)
    endif ()
  else ()
    message (SEND_ERROR "SLEPC_DIR can not be used, ${SLEPC_DIR}/include/slepcversion.h does not exist")
  endif ()
endfunction ()

find_path (SLEPC_DIR include/slepc.h
  HINTS ENV SLEPC_DIR
  PATHS
  /usr/lib/slepcdir/3.1 /usr/lib/slepcdir/3.0.0 /usr/lib/slepcdir/2.3.3 /usr/lib/slepcdir/2.3.2 # Debian
  $ENV{HOME}/slepc
  DOC "SLEPc Directory")

if (SLEPC_DIR AND NOT SLEPC_ARCH)
  set (_slepc_arches
    $ENV{SLEPC_ARCH}                   # If set, use environment variable first
    linux-gnu-c-debug linux-gnu-c-opt  # Debian defaults
    x86_64-unknown-linux-gnu i386-unknown-linux-gnu)
  set (slepcconf "NOTFOUND" CACHE FILEPATH "Cleared" FORCE)
  foreach (arch ${_slepc_arches})
    if (NOT SLEPC_ARCH)
      find_path (slepcconf slepcconf.h
	HINTS ${SLEPC_DIR}
	PATH_SUFFIXES ${arch}/include bmake/${arch}
	NO_DEFAULT_PATH)
      if (slepcconf)
	set (SLEPC_ARCH "${arch}" CACHE STRING "SLEPc build architecture")
      endif (slepcconf)
    endif (NOT SLEPC_ARCH)
  endforeach (arch)
  set (slepcconf "NOTFOUND" CACHE INTERNAL "Scratch variable" FORCE)
endif (SLEPC_DIR AND NOT SLEPC_ARCH)

set (slepc_slaves LIBRARIES_SYS LIBRARIES_VEC LIBRARIES_MAT LIBRARIES_DM LIBRARIES_KSP LIBRARIES_SNES LIBRARIES_TS
  INCLUDE_DIR INCLUDE_CONF)
include (${CMAKE_SOURCE_DIR}/CMake/FindPackageMultipass.cmake)
find_package_multipass (SLEPc slepc_config_current
  STATES DIR ARCH
  DEPENDENTS INCLUDES LIBRARIES COMPILER MPIEXEC ${slepc_slaves})

# Determine whether the SLEPc layout is old-style (through 2.3.3) or
# new-style (>= 3.0.0)
if (EXISTS "${SLEPC_DIR}/${SLEPC_ARCH}/include/slepc.h")   # > 2.3.3
  set (slepc_conf_rules "${SLEPC_DIR}/conf/slepc_common_rules")
  set (slepc_conf_variables "${SLEPC_DIR}/conf/slepc_common_variables")
elseif (SLEPC_DIR)
  message (SEND_ERROR "The pair SLEPC_DIR=${SLEPC_DIR} SLEPC_ARCH=${SLEPC_ARCH} do not specify a valid SLEPc installation")
endif ()
slepc_get_version()

if (slepc_conf_rules AND slepc_conf_variables AND NOT slepc_config_current)
  # Put variables into environment since they are needed to get
  # configuration (slepcvariables) in the SLEPc makefile
  set (ENV{SLEPC_DIR} "${SLEPC_DIR}")
  set (ENV{SLEPC_ARCH} "${SLEPC_ARCH}")

  # A temporary makefile to probe the SLEPc configuration
  set (slepc_config_makefile "${PROJECT_BINARY_DIR}/Makefile.slepc")
  file (WRITE "${slepc_config_makefile}"
"## This file was autogenerated by FindSLEPc.cmake
# SLEPC_DIR  = ${SLEPC_DIR}
# SLEPC_ARCH = ${SLEPC_ARCH}
include ${slepc_conf_rules}
include ${slepc_conf_variables}
show :
	-@echo -n \${\${VARIABLE}}
")

  macro (SLEPC_GET_VARIABLE name var)
    set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
    execute_process (COMMAND ${CMAKE_MAKE_PROGRAM} --no-print-directory -f ${slepc_config_makefile} show VARIABLE=${name}
      OUTPUT_VARIABLE ${var}
      RESULT_VARIABLE slepc_return)
  endmacro (SLEPC_GET_VARIABLE)
  slepc_get_variable (SLEPC_LIB_DIR            slepc_lib_dir)
  slepc_get_variable (SLEPC_EXTERNAL_LIB_BASIC slepc_libs_external)
  slepc_get_variable (SLEPC_CCPPFLAGS          slepc_cpp_line)
  slepc_get_variable (SLEPC_INCLUDE            slepc_include)
  slepc_get_variable (PCC                      slepc_cc)
  slepc_get_variable (MPIEXEC                  slepc_mpiexec)
  # We are done with the temporary Makefile, calling SLEPC_GET_VARIABLE after this point is invalid!
  file (REMOVE ${slepc_config_makefile})

  include (${CMAKE_SOURCE_DIR}/CMake/ResolveCompilerPaths.cmake)
  # Extract include paths and libraries from compile command line
  resolve_includes (slepc_includes_all "${slepc_cpp_line}")

  message (STATUS "slepc_lib_dir ${slepc_lib_dir}")

  macro (SLEPC_FIND_LIBRARY suffix name)
    set (SLEPC_LIBRARY_${suffix} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE) # Clear any stale value, if we got here, we need to find it again
    find_library (SLEPC_LIBRARY_${suffix} NAMES ${name} HINTS ${slepc_lib_dir} NO_DEFAULT_PATH)
    set (SLEPC_LIBRARIES_${suffix} "${SLEPC_LIBRARY_${suffix}}")
    mark_as_advanced (SLEPC_LIBRARY_${suffix})
  endmacro (SLEPC_FIND_LIBRARY suffix name)

  # Look for slepcvec first, if it doesn't exist, we must be using single-library
  slepc_find_library (VEC slepcvec)
  if (SLEPC_LIBRARY_VEC)
    slepc_find_library (SYS  "slepcsys;slepc") # libslepcsys is called libslepc prior to 3.1 (when single-library was introduced)
    slepc_find_library (MAT  slepcmat)
    slepc_find_library (DM   slepcdm)
    slepc_find_library (KSP  slepcksp)
    slepc_find_library (SNES slepcsnes)
    slepc_find_library (TS   slepcts)
    macro (SLEPC_JOIN libs deps)
      list (APPEND SLEPC_LIBRARIES_${libs} ${SLEPC_LIBRARIES_${deps}})
    endmacro (SLEPC_JOIN libs deps)
    slepc_join (VEC  SYS)
    slepc_join (MAT  VEC)
    slepc_join (DM   MAT)
    slepc_join (KSP  DM)
    slepc_join (SNES KSP)
    slepc_join (TS   SNES)
    slepc_join (ALL  TS)
  else ()
    set (SLEPC_LIBRARY_VEC "NOTFOUND" CACHE INTERNAL "Cleared" FORCE) # There is no libslepcvec
    slepc_find_library (SINGLE slepc)
    foreach (pkg SYS VEC MAT DM KSP SNES TS ALL)
      set (SLEPC_LIBRARIES_${pkg} "${SLEPC_LIBRARY_SINGLE}")
    endforeach ()
  endif ()
  if (SLEPC_LIBRARY_TS)
    message (STATUS "Recognized SLEPc install with separate libraries for each package")
  else ()
    message (STATUS "Recognized SLEPc install with single library for all packages")
  endif ()

  include (CheckCSourceRuns)
  macro (SLEPC_TEST_RUNS includes libraries runs)
    multipass_c_source_runs ("${includes}" "${libraries}" "
static const char help[] = \"SLEPc test program.\";
#include \"slepcts.h\"
int main(int argc,char *argv[]) {
  SlepcErrorCode ierr;
  TS ts;

  ierr = SlepcInitialize(&argc,&argv,0,help);CHKERRQ(ierr);
  ierr = TSCreate(SLEPC_COMM_WORLD,&ts);CHKERRQ(ierr);
  ierr = TSSetFromOptions(ts);CHKERRQ(ierr);
  ierr = TSDestroy(ts);CHKERRQ(ierr);
  ierr = SlepcFinalize();CHKERRQ(ierr);
  return 0;
}
" ${runs})
    if (${${runs}})
      set (SLEPC_EXECUTABLE_RUNS "YES" CACHE BOOL
	"Can the system successfully run a SLEPc executable?  This variable can be manually set to \"YES\" to force CMake to accept a given SLEPc configuration, but this will almost always result in a broken build.  If you change SLEPC_DIR, SLEPC_ARCH, or SLEPC_CURRENT you would have to reset this variable." FORCE)
    endif (${${runs}})
  endmacro (SLEPC_TEST_RUNS)

  find_path (SLEPC_INCLUDE_DIR slepcts.h HINTS "${SLEPC_DIR}" PATH_SUFFIXES include NO_DEFAULT_PATH)
  find_path (SLEPC_INCLUDE_CONF slepcconf.h HINTS "${SLEPC_DIR}" PATH_SUFFIXES "${SLEPC_ARCH}/include" "bmake/${SLEPC_ARCH}" NO_DEFAULT_PATH)
  mark_as_advanced (SLEPC_INCLUDE_DIR SLEPC_INCLUDE_CONF)
  set (slepc_includes_minimal ${SLEPC_INCLUDE_CONF} ${SLEPC_INCLUDE_DIR})

  slepc_test_runs ("${slepc_includes_minimal}" "${SLEPC_LIBRARIES_TS}" slepc_works_minimal)
  if (slepc_works_minimal)
    message (STATUS "Minimal SLEPc includes and libraries work.  This probably means we are building with shared libs.")
    set (slepc_includes_needed "${slepc_includes_minimal}")
  else (slepc_works_minimal)	# Minimal includes fail, see if just adding full includes fixes it
    slepc_test_runs ("${slepc_includes_all}" "${SLEPC_LIBRARIES_TS}" slepc_works_allincludes)
    if (slepc_works_allincludes) # It does, we just need all the includes (
      message (STATUS "SLEPc requires extra include paths, but links correctly with only interface libraries.  This is an unexpected configuration (but it seems to work fine).")
      set (slepc_includes_needed ${slepc_includes_all})
    else (slepc_works_allincludes) # We are going to need to link the external libs explicitly
      resolve_libraries (slepc_libraries_external "${slepc_libs_external}")
      foreach (pkg SYS VEC MAT DM KSP SNES TS ALL)
	list (APPEND SLEPC_LIBRARIES_${pkg}  ${slepc_libraries_external})
      endforeach (pkg)
      slepc_test_runs ("${slepc_includes_minimal}" "${SLEPC_LIBRARIES_TS}" slepc_works_alllibraries)
      if (slepc_works_alllibraries)
	 message (STATUS "SLEPc only need minimal includes, but requires explicit linking to all dependencies.  This is expected when SLEPc is built with static libraries.")
	set (slepc_includes_needed ${slepc_includes_minimal})
      else (slepc_works_alllibraries)
	# It looks like we really need everything, should have listened to Matt
	set (slepc_includes_needed ${slepc_includes_all})
	slepc_test_runs ("${slepc_includes_all}" "${SLEPC_LIBRARIES_TS}" slepc_works_all)
	if (slepc_works_all) # We fail anyways
	  message (STATUS "SLEPc requires extra include paths and explicit linking to all dependencies.  This probably means you have static libraries and something unexpected in SLEPc headers.")
	else (slepc_works_all) # We fail anyways
	  message (STATUS "SLEPc could not be used, maybe the install is broken.")
	endif (slepc_works_all)
      endif (slepc_works_alllibraries)
    endif (slepc_works_allincludes)
  endif (slepc_works_minimal)

  # We do an out-of-source build so __FILE__ will be an absolute path, hence __INSDIR__ is superfluous
  if (${SLEPC_VERSION} VERSION_LESS 3.1)
    set (SLEPC_DEFINITIONS "-D__SDIR__=\"\"" CACHE STRING "SLEPc definitions" FORCE)
  else ()
    set (SLEPC_DEFINITIONS "-D__INSDIR__=" CACHE STRING "SLEPc definitions" FORCE)
  endif ()
  # Sometimes this can be used to assist FindMPI.cmake
  set (SLEPC_MPIEXEC ${slepc_mpiexec} CACHE FILEPATH "Executable for running SLEPc MPI programs" FORCE)
  set (SLEPC_INCLUDES ${slepc_includes_needed} CACHE STRING "SLEPc include path" FORCE)
  set (SLEPC_LIBRARIES ${SLEPC_LIBRARIES_ALL} CACHE STRING "SLEPc libraries" FORCE)
  set (SLEPC_COMPILER ${slepc_cc} CACHE FILEPATH "SLEPc compiler" FORCE)
  # Note that we have forced values for all these choices.  If you
  # change these, you are telling the system to trust you that they
  # work.  It is likely that you will end up with a broken build.
  mark_as_advanced (SLEPC_INCLUDES SLEPC_LIBRARIES SLEPC_COMPILER SLEPC_DEFINITIONS SLEPC_MPIEXEC SLEPC_EXECUTABLE_RUNS)
endif ()

include (FindPackageHandleStandardArgs)
find_package_handle_standard_args (SLEPc
  "SLEPc could not be found.  Be sure to set SLEPC_DIR and SLEPC_ARCH."
  SLEPC_INCLUDES SLEPC_LIBRARIES SLEPC_EXECUTABLE_RUNS)
